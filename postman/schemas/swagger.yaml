openapi: "3.0.1"

info:
  title: "api-monetization-gateway"
  description: "This gateway acts as a front door to your API, allowing us to control access to the underlying services and resources."
  version: "1.0.0"

tags:
  - name: "JREUserInfoAPI"
    description: "JR東日本を利用するユーザーに関するAPI"
  - name: "JRETrainAPI"
    description: "JR東日本の運行情報に関するAPI"

paths:
  /ekiuser:
    get:
      tags:
        - "JREUserInfoAPI"
      summary: "駅ユーザーの統計情報を取得するAPI"
      description: "このAPIは利用回数ごとに課金されますね。"
      operationId: "getEkiuser"
      parameters:
        - name: frontegg-client-id
          in: header
          description: 'JRデータマートサービスで発行されたClient IDを設定してください。'
          required: true
          schema:
            type: string
        - name: frontegg-secret-key
          in: header
          description: 'JRデータマートサービスで発行されたSecret Keyキーを設定してください。'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "200 OK"
        "404":
          description: "404 Not Found"
      security:
      - authorizer: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EkiuserAPIFunction/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/LambdaInvocationRole"
        connectionType: "INTERNET"

  /kaisatsu:
    get:
      tags:
        - "JREUserInfoAPI"
      summary: "改札の利用者を取得するAPI"
      description: "このAPIは利用回数ごとに課金されます。"
      operationId: "getKaisatsu"
      parameters:
        - name: frontegg-client-id
          in: header
          description: 'JRデータマートサービスで発行されたClient IDを設定してください。'
          required: true
          schema:
            type: string
        - name: frontegg-secret-key
          in: header
          description: 'JRデータマートサービスで発行されたSecret Keyキーを設定してください。'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "200 OK"
        "404":
          description: "404 Not Found"
      security:
      - authorizer: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:KaisatsuAPIFunction/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/LambdaInvocationRole"
        connectionType: "INTERNET"

  /suicauser:
    get:
      tags:
        - "JREUserInfoAPI"
      summary: "Suicaの利用者統計を取得するAPI"
      description: "このAPIは利用回数ごとに課金されます。"
      operationId: "getSuicauser"
      parameters:
        - name: frontegg-client-id
          in: header
          description: 'JRデータマートサービスで発行されたClient IDを設定してください。'
          required: true
          schema:
            type: string
        - name: frontegg-secret-key
          in: header
          description: 'JRデータマートサービスで発行されたSecret Keyキーを設定してください。'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "200 OK"
        "404":
          description: "404 Not Found"
      security:
      - authorizer: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SuicauserAPIFunction/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/LambdaInvocationRole"
        connectionType: "INTERNET"

  /zaisen:
    get:
      tags:
        - "JRETrainAPI"
      summary: "在線位置を取得するAPI"
      description: "このAPIは利用回数ごとに課金されます。"
      operationId: "getZaisen"
      parameters:
        - name: frontegg-client-id
          in: header
          description: 'JRデータマートサービスで発行されたClient IDを設定してください。'
          required: true
          schema:
            type: string
        - name: frontegg-secret-key
          in: header
          description: 'JRデータマートサービスで発行されたSecret Keyキーを設定してください。'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "200 OK"
        "404":
          description: "404 Not Found"
      security:
      - authorizer: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ZaisenAPIFunction/invocations"
        credentials: "arn:aws:iam::${AWS::AccountId}:role/LambdaInvocationRole"
        connectionType: "INTERNET"

components:
  securitySchemes:
    authorizer:
      type: "apiKey"
      name: "Frontegg M2M Token"
      in: "header"
      x-amazon-apigateway-authorizer:
        identitySource: "$request.header.frontegg-client-id,$request.header.frontegg-secret-key"
        authorizerUri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AuthorizerFunction/invocations"
        authorizerCredentials: "arn:aws:iam::${AWS::AccountId}:role/LambdaInvocationRole"
        authorizerPayloadFormatVersion: "2.0"
        authorizerResultTtlInSeconds: 1
        type: "request"
        enableSimpleResponses: true

x-amazon-apigateway-importexport-version: "1.0"